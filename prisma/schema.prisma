// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id         String       @id
  name       String
  status     Boolean      @default(true)
  createdAt  DateTime     @default(now())
  Feed       Feed[]
  TenantUser TenantUser[]
}

model User {
  id                       String                     @id
  name                     String
  email                    String
  passwordHash             String?
  status                   Boolean                    @default(true)
  createdAt                DateTime                   @default(now())
  type                     UserType                   @default(NORMAL)
  Post                     Post[]
  PostReaction             PostReaction[]
  PostModerationRequest    PostModerationRequest[]
  Comment                  Comment[]
  CommentModerationRequest CommentModerationRequest[]
  CommentReaction          CommentReaction[]
  TenantUser               TenantUser[]
}

enum UserType {
  NORMAL
  SUPERADMIN
}

model TenantUser {
  id        String         @id
  tenantId  String
  userId    String
  type      TenantUserType @default(NORMAL)
  createdAt DateTime       @default(now())
  Tenant    Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  User      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TenantUserType {
  NORMAL
  MODERATOR
  MANAGER
}

model Feed {
  id        String   @id
  title     String
  tenantId  String
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  Tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  Post      Post[]
}

model Post {
  id                    String                  @id
  feedId                String
  userId                String
  title                 String
  description           String
  status                Boolean                 @default(true)
  createdAt             DateTime                @default(now())
  Feed                  Feed                    @relation(fields: [feedId], references: [id], onDelete: Cascade)
  User                  User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  PostReaction          PostReaction[]
  PostModerationRequest PostModerationRequest[]
  Comment               Comment[]
}

model PostReaction {
  id        String   @id
  postId    String
  userId    String
  reaction  Reaction
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostModerationRequest {
  id        String   @id
  postId    String
  userId    String
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id                       String                     @id
  postId                   String
  userId                   String
  status                   Boolean                    @default(true)
  description              String
  createdAt                DateTime                   @default(now())
  Post                     Post                       @relation(fields: [postId], references: [id], onDelete: Cascade)
  User                     User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  CommentModerationRequest CommentModerationRequest[]
  CommentReaction          CommentReaction[]
}

model CommentModerationRequest {
  id        String   @id
  commentId String
  userId    String
  createdAt DateTime @default(now())
  Comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommentReaction {
  id        String   @id
  commentId String
  userId    String
  reaction  Reaction
  createdAt DateTime @default(now())
  Comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Reaction {
  LIKE
  HAHA
  WOW
  LOVE
  ANGRY
  SAD
}
