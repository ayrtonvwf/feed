// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  User      User[]
  Feed      Feed[]
}

model User {
  id                   String                 @id @default(uuid()) @db.Uuid
  name                 String
  email                String
  status               Boolean                @default(true)
  companyId            String                 @db.Uuid
  createdAt            DateTime               @default(now())
  Company              Company                @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Post                 Post[]
  PostReaction         PostReaction[]
  PostReviewRequest    PostReviewRequest[]
  Comment              Comment[]
  CommentReviewRequest CommentReviewRequest[]
  CommentReaction      CommentReaction[]
}

model Feed {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  companyId String   @db.Uuid
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  Company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Post      Post[]
}

model Post {
  id                String              @id @default(uuid()) @db.Uuid
  feedId            String              @db.Uuid
  userId            String              @db.Uuid
  title             String
  description       String
  status            Boolean             @default(true)
  createdAt         DateTime            @default(now())
  Feed              Feed                @relation(fields: [feedId], references: [id], onDelete: Cascade)
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  PostReaction      PostReaction[]
  PostReviewRequest PostReviewRequest[]
  Comment           Comment[]
}

model PostReaction {
  id        String   @id @default(uuid()) @db.Uuid
  postId    String   @db.Uuid
  userId    String   @db.Uuid
  reaction  Reaction
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PostReviewRequest {
  id        String   @id @default(uuid()) @db.Uuid
  postId    String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id                   String                 @id @default(uuid()) @db.Uuid
  postId               String                 @db.Uuid
  userId               String                 @db.Uuid
  status               Boolean                @default(true)
  createdAt            DateTime               @default(now())
  Post                 Post                   @relation(fields: [postId], references: [id], onDelete: Cascade)
  User                 User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  CommentReviewRequest CommentReviewRequest[]
  CommentReaction      CommentReaction[]
}

model CommentReviewRequest {
  id        String   @id @default(uuid()) @db.Uuid
  commentId String   @db.Uuid
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  Comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CommentReaction {
  id        String   @id @default(uuid()) @db.Uuid
  commentId String   @db.Uuid
  userId    String   @db.Uuid
  reaction  Reaction
  createdAt DateTime @default(now())
  Comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Reaction {
  LIKE
  HAHA
  WOW
  LOVE
  ANGRY
  SAD
}
